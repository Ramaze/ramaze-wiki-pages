* Les Principes de Ramaze
** KISS (Keep It Super Simple) : Toujours aller au plus simple
Ramaze n'inclus pas de changement majeur au niveau des paradigmes pour 
quiconque familier à Ruby et aux bases du developpement web. 

** POLS (Principle of Least Surprise) : Principe de moindre surprise
Ramaze est intuitif et facile à apprendre. La plupart des fonctionalitées 
sont embarquées.

** Un design Modulaire
Utilise ce que tu veux et comme tu veux.  Ramaze te permet d'utiliser 
l'un des langages les plus puissant, Ruby, qui te donne accès à tout ton system.
Même les parties les plus essentiels de Ramaze peuvent être facilement
remplacées ou modifiées sans rien perdre des avantages du framework lui-même.

** Dépendance minimum
Ramaze n'a que 2 dependances en dehors de Ruby lui-même, [[Innate]] qui 
est le nouveau noyau de Ramaze et [[http://rack.rubyforge.org][Rack]]. 
La plupart des dispositifs sont intégrés de façon très modulaire qui
ne requière que l'installation des tierces packages que vous voulez vraiment
utiliser. 

** Documentation
Tout est documenté: classes, modules, methodes, configuration.
A travers une documentation sans-cesse grandissante, Ramaze donne
aux développeurs l'accès facile à une solide compréhension de ses
concepts et fonctionalitées. 

** Développement Open Source
Tout le monde est le bienvenu pour contribuer au developpement de Ramaze, 
et de manière facile. La boite de dépôt est ouverte aux patches qui 
passent nos tests. Quand vous aurez proposé quelques patches utiles,
vous obtiendrez un accès direct et gratuit à la boite de dépôt.

Pour plus d'infos, lisez l'article: [[Contributing][Contribuer]].

** Exemples
Chacun apprend de façon différente: certains ne lisent que les fichiers source, 
d'autres parcours la documentation; mais tout le monde aime les exemples
pour commencer vite et sans peine. Ramaze dispose pour cela d'une grande variété
d'[[Walkthrough#examples][exemples]] pour un usage basic, ou plus avancé.

** Entièrement BDD (Behaviour Driven Design)
Ramaze possède un set très complet de "spécifications" écrites en
[[http://chneukirchen.org/repos/bacon][Bacon]]. Ces specs définissent la
façon dont Ramaze dois réagir. Les specs sont testées à chaque fois qu'un
patch est proposé, ainsi nous pouvons vérifier que le patch ne peut pas mettre 
le framework en échec. 
 
Ramaze a couvert [[http://darcs.riffraff.info/ramaze-coverage/][91.3% des problèmes]] lors d'un récent audit.
